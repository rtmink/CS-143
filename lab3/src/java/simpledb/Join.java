package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    // ME
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple tuple1;
    private Tuple tuple2;
    private  boolean noMoreTuples;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // DONE
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // DONE
    	return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // DONE?
    	return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // DONE
    	return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // DONE?
    	return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // DONE?
    	child1.open();
    	child2.open();
    	super.open();
    }

    public void close() {
        // DONE?
    	super.close();
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // DONE?
    	child1.rewind();
    	child2.rewind();
    	
    	// Reinitialize state variables
    	tuple1 = null;
    	tuple2 = null;
    	noMoreTuples = false;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // DONE?
    	if (noMoreTuples)
    		return null;
    	
    	while (true) {
    		if (tuple1 == null) {
        		if (child1.hasNext())
        			tuple1 = child1.next();
        		else
        			// No more tuples
        			break;
    		}
    		
    		if (tuple2 == null)
				child2.rewind();
			
			while (child2.hasNext()) {
    			tuple2 = child2.next();
    			
    			if (p.filter(tuple1, tuple2))
    				return createMergedTuple(tuple1, tuple2);	
    		}
    		
    		// Need to rewind Tuple 2 & Fetch next Tuple 1
			tuple1 = null;
			tuple2 = null;
    		
    	}// END-while
    	
    	// There are no more tuples
    	noMoreTuples = true;
    	return null;
    }
    
    // ME: Helper function to merge two tuples
    private Tuple createMergedTuple(Tuple tuple1, Tuple tuple2) {
    	// TODO: Remove duplicate columns on equality???
		Tuple newTuple = new Tuple(getTupleDesc());
		
		int i;
		for (i = 0; i < child1.getTupleDesc().numFields(); i++) {
			newTuple.setField(i, tuple1.getField(i));
		}
		
		for (int j = 0; j < child2.getTupleDesc().numFields(); j++, i++) {
			newTuple.setField(i, tuple2.getField(j));
		}
		
		return newTuple;
    }

    @Override
    public DbIterator[] getChildren() {
        // DONE
    	return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // DONE
    	if (child1 != children[0])
    		child1 = children[0];
    	
    	if (child2 != children[1])
    		child2 = children[1];
    }

}
